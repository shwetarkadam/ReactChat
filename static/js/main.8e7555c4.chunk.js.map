{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","src","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","uery","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFromValue","sendMessage","e","a","console","log","trim","length","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behaviour","map","msg","ChatMessage","message","id","ref","value","onChange","target","type","props","messageClass","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAQAA,IAASC,cAAc,CACrBC,OAAQ,0CACNC,WAAY,qCACZC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGnB,IAAMC,EAAKT,IAASS,OACdC,EAAUV,IAASU,YAmBzB,SAASC,IAKT,OAGE,yBAAQC,UAAU,eAAgBC,QAPX,WACrB,IAAMC,EAAS,IAAId,IAASS,KAAKM,mBACjCN,EAAKO,gBAAgBF,IAKvB,UAA6D,qBAAKG,IAAI,2DAAtE,yBAOF,SAASC,IACP,OAAOT,EAAKU,aACV,wBAAQN,QAAS,kBAAIJ,EAAKW,WAA1B,sBAKJ,SAASC,IACP,IAAMC,EAAMC,mBACRC,EAAYd,EAAUe,WAAW,aAGjCC,EAAKF,EAAYG,QAAQ,aAAaC,MAAM,IAGlD,EAAiBC,YAAkBH,EAAK,CAACI,QAAQ,OAA1CC,EAAP,oBAEA,EAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAW,uCAAC,WAAMC,GAAN,mBAAAC,EAAA,yDAChBC,QAAQC,IAAI,YAAYN,EAAUO,OAAOC,QAEzCL,EAAEM,mBACCT,EAAUO,OAAOC,OAAO,GAJX,yBAKKhC,EAAKU,YAAnBwB,EALS,EAKTA,IAAIC,EALK,EAKLA,SALK,SAOVpB,EAAYqB,IAAI,CACpBC,KAAKb,EACLc,UAAU/C,IAASU,UAAUsC,WAAWC,kBACxCN,MACAC,aAXc,OAchBV,EAAa,IACbZ,EAAM4B,QAAQC,eAAe,CAACC,UAAU,WAfxB,2CAAD,sDAkBjB,OACE,gCACE,iCACCrB,GAAYA,EAASsB,KAAI,SAAAC,GAAG,OAAG,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OACtD,qBAAMC,IAAKpC,OAGb,iCAEE,uBAAQqC,MAAO1B,EAAW2B,SAAU,SAACxB,GAAD,OAAKF,EAAaE,EAAEyB,OAAOF,UAC/D,wBAAQG,KAAK,SAASjD,QAASsB,EAA/B,gCAQJ,SAASoB,EAAYQ,GACnB,MAA0BA,EAAMP,QAAzBV,EAAP,EAAOA,KAAKH,EAAZ,EAAYA,IAAIC,EAAhB,EAAgBA,SAEVoB,EAAarB,IAAMlC,EAAKU,YAAYwB,IAAK,OAAO,WAErD,OAAO,sBAAK/B,UAAS,kBAAeoD,GAA7B,UACV,qBAAK/C,IAAK2B,IACL,4BAAIE,OAGMmB,MAjGf,WAEA,MAAaC,YAAazD,GAAnB0D,EAAP,oBAEE,OACE,sBAAKvD,UAAU,MAAf,UACE,oEAEN,cAACM,EAAD,OAGI,kCACCiD,EAAK,cAAC9C,EAAD,IAAa,cAACV,EAAD,UCrBRyD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8e7555c4.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nimport {useAuthState} from 'react-firebase-hooks/auth';\r\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\r\nimport './App.css';\r\nimport { useRef, useState } from 'react';\r\nfirebase.initializeApp({\r\n  apiKey: \"AIzaSyDPpkjYcvA7P3in8wexntxqEdMuHInFJQM\",\r\n    authDomain: \"reactchatapp-8bd09.firebaseapp.com\",\r\n    projectId: \"reactchatapp-8bd09\",\r\n    storageBucket: \"reactchatapp-8bd09.appspot.com\",\r\n    messagingSenderId: \"888041213724\",\r\n    appId: \"1:888041213724:web:e88cc3e5f603cf1c58b4d9\",\r\n    measurementId: \"G-YHB110VHDM\"\r\n});\r\n\r\nconst auth=firebase.auth();\r\nconst firestore=firebase.firestore();\r\n\r\nfunction App() {\r\n  \r\nconst [user]=useAuthState(auth); //iifnull user signed out\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n      üí¨Shweta's Chat Room\r\n<SignOut />\r\n    </header>\r\n  \r\n    <section>\r\n    {user?<ChatRoom />:<SignIn/>}\r\n    </section>\r\n    </div>\r\n  );\r\n}\r\nfunction SignIn(){\r\n  const signInWithGoogle=()=>{\r\n    const provider=new firebase.auth.GoogleAuthProvider();\r\n    auth.signInWithPopup(provider);\r\n  }\r\nreturn(\r\n\r\n\r\n  <button className=\"signInbutton\"  onClick={signInWithGoogle}><img src=\"https://img.icons8.com/color/48/000000/google-logo.png\"/>\r\n  Sign In with Google</button>\r\n)\r\n}\r\n\r\n\r\n\r\nfunction SignOut(){\r\n  return auth.currentUser &&(\r\n    <button onClick={()=>auth.signOut()}>Sign Out</button>\r\n  )\r\n}\r\n\r\n\r\nfunction ChatRoom(){\r\n  const dummy=useRef();\r\nconst messagesRef=firestore.collection(\"messsages\");//reference firestore collection to db named messages\r\n//uery a subset of documents in collection\r\n//console.log(messagesRef);\r\nconst uery=messagesRef.orderBy('createdAt').limit(50);\r\n\r\n//listen to datawith  hook\r\nconst [messages]=useCollectionData(uery,{idField:'id'});\r\n\r\nconst [formValue,setFromValue]=useState('');\r\n//console.log(messages);\r\nconst sendMessage=async(e)=>{\r\n  console.log(\"fomrvaue=\"+formValue.trim().length);\r\n\r\n  e.preventDefault();\r\n  if(formValue.trim().length>0){\r\n  const {uid,photoURL}=auth.currentUser;\r\n  //create new document in firestoe\r\n  await messagesRef.add({\r\n    text:formValue,\r\n    createdAt:firebase.firestore.FieldValue.serverTimestamp(),\r\n    uid,\r\n    photoURL\r\n  });\r\n  }\r\n  setFromValue('');//reset the form to empty\r\n  dummy.current.scrollIntoView({behaviour:'smooth'});\r\n\r\n}\r\nreturn(\r\n  <div>\r\n    <main>\r\n    {messages && messages.map(msg=> <ChatMessage key={msg.id} message={msg}/>)}\r\n    <div  ref={dummy}></div>\r\n    </main>\r\n    \r\n  <form>\r\n    {/* bind state to form input */}\r\n    <input  value={formValue} onChange={(e)=>setFromValue(e.target.value)}/>\r\n    <button type=\"submit\" onClick={sendMessage}>‚úîÔ∏è</button>\r\n  </form>\r\n  </div>\r\n)\r\n\r\n}\r\n\r\n\r\nfunction ChatMessage(props){\r\n  const {text,uid,photoURL}=props.message;\r\n  //comparing userid on te firestore doc with current logged in user\r\n  const messageClass=uid===auth.currentUser.uid ?'sent':'received';\r\n//  console.log(text)\r\n   return(<div className={  `message ${messageClass}`}>\r\n<img src={photoURL}  />\r\n     <p>{text}</p>\r\n   </div>)\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}